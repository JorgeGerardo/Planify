// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Planify.Data;

#nullable disable

namespace Planify.Migrations
{
    [DbContext(typeof(ProjectContext))]
    [Migration("20250203060240_StartDateRequired")]
    partial class StartDateRequired
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DepartmentEmployee", b =>
                {
                    b.Property<int>("DepartmentsId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeesId")
                        .HasColumnType("int");

                    b.HasKey("DepartmentsId", "EmployeesId");

                    b.HasIndex("EmployeesId");

                    b.ToTable("DepartmentEmployee");

                    b.HasData(
                        new
                        {
                            DepartmentsId = 3,
                            EmployeesId = 1
                        },
                        new
                        {
                            DepartmentsId = 2,
                            EmployeesId = 1
                        },
                        new
                        {
                            DepartmentsId = 1,
                            EmployeesId = 2
                        },
                        new
                        {
                            DepartmentsId = 2,
                            EmployeesId = 2
                        },
                        new
                        {
                            DepartmentsId = 1,
                            EmployeesId = 4
                        },
                        new
                        {
                            DepartmentsId = 2,
                            EmployeesId = 4
                        },
                        new
                        {
                            DepartmentsId = 1,
                            EmployeesId = 5
                        },
                        new
                        {
                            DepartmentsId = 3,
                            EmployeesId = 7
                        },
                        new
                        {
                            DepartmentsId = 3,
                            EmployeesId = 8
                        },
                        new
                        {
                            DepartmentsId = 3,
                            EmployeesId = 9
                        });
                });

            modelBuilder.Entity("EmployeeProject", b =>
                {
                    b.Property<int>("EmployeesId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectsId")
                        .HasColumnType("int");

                    b.HasKey("EmployeesId", "ProjectsId");

                    b.HasIndex("ProjectsId");

                    b.ToTable("EmployeeProject");

                    b.HasData(
                        new
                        {
                            EmployeesId = 1,
                            ProjectsId = 1
                        },
                        new
                        {
                            EmployeesId = 2,
                            ProjectsId = 1
                        },
                        new
                        {
                            EmployeesId = 3,
                            ProjectsId = 1
                        },
                        new
                        {
                            EmployeesId = 4,
                            ProjectsId = 1
                        });
                });

            modelBuilder.Entity("EmployeeProjectTask", b =>
                {
                    b.Property<int>("EmployeesId")
                        .HasColumnType("int");

                    b.Property<int>("TasksId")
                        .HasColumnType("int");

                    b.HasKey("EmployeesId", "TasksId");

                    b.HasIndex("TasksId");

                    b.ToTable("EmployeeProjectTask");

                    b.HasData(
                        new
                        {
                            EmployeesId = 2,
                            TasksId = 1
                        },
                        new
                        {
                            EmployeesId = 2,
                            TasksId = 2
                        },
                        new
                        {
                            EmployeesId = 3,
                            TasksId = 2
                        },
                        new
                        {
                            EmployeesId = 4,
                            TasksId = 2
                        },
                        new
                        {
                            EmployeesId = 2,
                            TasksId = 3
                        });
                });

            modelBuilder.Entity("Planify.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDateUTC")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedTimeUTC")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdatedUTC")
                        .IsConcurrencyToken()
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDateUTC = new DateTime(2025, 2, 3, 6, 2, 38, 252, DateTimeKind.Utc).AddTicks(2398),
                            IsDeleted = false,
                            Name = "RH"
                        },
                        new
                        {
                            Id = 2,
                            CreateDateUTC = new DateTime(2025, 2, 3, 6, 2, 38, 252, DateTimeKind.Utc).AddTicks(2399),
                            IsDeleted = false,
                            Name = "DevOps"
                        },
                        new
                        {
                            Id = 3,
                            CreateDateUTC = new DateTime(2025, 2, 3, 6, 2, 38, 252, DateTimeKind.Utc).AddTicks(2400),
                            IsDeleted = false,
                            Name = "TI"
                        },
                        new
                        {
                            Id = 4,
                            CreateDateUTC = new DateTime(2025, 2, 3, 6, 2, 38, 252, DateTimeKind.Utc).AddTicks(2401),
                            IsDeleted = false,
                            Name = "Finance"
                        });
                });

            modelBuilder.Entity("Planify.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDateUTC")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedTimeUTC")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("HireDate")
                        .HasColumnType("date")
                        .HasColumnOrder(4);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdatedUTC")
                        .IsConcurrencyToken()
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(1);

                    b.Property<int>("PersonId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDateUTC = new DateTime(2025, 2, 3, 6, 2, 38, 249, DateTimeKind.Utc).AddTicks(3535),
                            HireDate = new DateOnly(2022, 5, 1),
                            IsDeleted = false,
                            Name = "Jorge",
                            PersonId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreateDateUTC = new DateTime(2025, 2, 3, 6, 2, 38, 249, DateTimeKind.Utc).AddTicks(3541),
                            HireDate = new DateOnly(2020, 11, 1),
                            IsDeleted = false,
                            Name = "Ana",
                            PersonId = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreateDateUTC = new DateTime(2025, 2, 3, 6, 2, 38, 249, DateTimeKind.Utc).AddTicks(3542),
                            HireDate = new DateOnly(2021, 12, 31),
                            IsDeleted = false,
                            Name = "Mariana",
                            PersonId = 3,
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            CreateDateUTC = new DateTime(2025, 2, 3, 6, 2, 38, 249, DateTimeKind.Utc).AddTicks(3544),
                            HireDate = new DateOnly(2018, 12, 31),
                            IsDeleted = false,
                            Name = "Antonella",
                            PersonId = 4,
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            CreateDateUTC = new DateTime(2025, 2, 3, 6, 2, 38, 249, DateTimeKind.Utc).AddTicks(3546),
                            HireDate = new DateOnly(2017, 5, 1),
                            IsDeleted = false,
                            Name = "Antonella",
                            PersonId = 5,
                            UserId = 5
                        },
                        new
                        {
                            Id = 6,
                            CreateDateUTC = new DateTime(2025, 2, 3, 6, 2, 38, 249, DateTimeKind.Utc).AddTicks(3547),
                            HireDate = new DateOnly(2021, 1, 1),
                            IsDeleted = false,
                            Name = "Carlos Mario",
                            PersonId = 6,
                            UserId = 6
                        },
                        new
                        {
                            Id = 7,
                            CreateDateUTC = new DateTime(2025, 2, 3, 6, 2, 38, 249, DateTimeKind.Utc).AddTicks(3549),
                            HireDate = new DateOnly(2022, 6, 29),
                            IsDeleted = false,
                            Name = "Samuel Juan",
                            PersonId = 7,
                            UserId = 7
                        },
                        new
                        {
                            Id = 8,
                            CreateDateUTC = new DateTime(2025, 2, 3, 6, 2, 38, 249, DateTimeKind.Utc).AddTicks(3551),
                            HireDate = new DateOnly(2023, 2, 27),
                            IsDeleted = false,
                            Name = "Brandon",
                            PersonId = 8,
                            UserId = 8
                        },
                        new
                        {
                            Id = 9,
                            CreateDateUTC = new DateTime(2025, 2, 3, 6, 2, 38, 249, DateTimeKind.Utc).AddTicks(3552),
                            HireDate = new DateOnly(2024, 2, 10),
                            IsDeleted = false,
                            Name = "Santiago",
                            PersonId = 9,
                            UserId = 9
                        });
                });

            modelBuilder.Entity("Planify.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("BornDate")
                        .HasColumnType("date");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDateUTC")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedTimeUTC")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastNames")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedUTC")
                        .IsConcurrencyToken()
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(1);

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Person");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BornDate = new DateOnly(1985, 5, 23),
                            City = "Guadalajara",
                            Country = "México",
                            CreateDateUTC = new DateTime(2025, 2, 3, 6, 2, 38, 248, DateTimeKind.Utc).AddTicks(8851),
                            IsDeleted = false,
                            LastNames = "Gerardo Rojo",
                            Name = "Jorguito",
                            Sate = "Sinaloa"
                        },
                        new
                        {
                            Id = 2,
                            BornDate = new DateOnly(1990, 3, 14),
                            City = "Culiacan",
                            Country = "México",
                            CreateDateUTC = new DateTime(2025, 2, 3, 6, 2, 38, 248, DateTimeKind.Utc).AddTicks(8860),
                            IsDeleted = false,
                            LastNames = "Argon Lazaro",
                            Name = "Ana",
                            Sate = "Sinaloa"
                        },
                        new
                        {
                            Id = 3,
                            BornDate = new DateOnly(1992, 8, 12),
                            City = "Monterrey",
                            Country = "México",
                            CreateDateUTC = new DateTime(2025, 2, 3, 6, 2, 38, 248, DateTimeKind.Utc).AddTicks(8862),
                            IsDeleted = false,
                            LastNames = "Garza",
                            Name = "Mariana",
                            Sate = "Nuevo Leon"
                        },
                        new
                        {
                            Id = 4,
                            BornDate = new DateOnly(1988, 6, 30),
                            City = "Mexicali",
                            Country = "México",
                            CreateDateUTC = new DateTime(2025, 2, 3, 6, 2, 38, 248, DateTimeKind.Utc).AddTicks(8864),
                            IsDeleted = false,
                            LastNames = "Duran",
                            Name = "Antonella",
                            Sate = "Baja california"
                        },
                        new
                        {
                            Id = 5,
                            BornDate = new DateOnly(1983, 9, 25),
                            City = "Monterrey",
                            Country = "México",
                            CreateDateUTC = new DateTime(2025, 2, 3, 6, 2, 38, 248, DateTimeKind.Utc).AddTicks(8963),
                            IsDeleted = false,
                            LastNames = "Dorigan",
                            Name = "Carlos Mario",
                            Sate = "Nuevo Leon"
                        },
                        new
                        {
                            Id = 6,
                            BornDate = new DateOnly(1995, 1, 18),
                            City = "Culiacán",
                            Country = "México",
                            CreateDateUTC = new DateTime(2025, 2, 3, 6, 2, 38, 248, DateTimeKind.Utc).AddTicks(8964),
                            IsDeleted = false,
                            LastNames = "Rodriguez Sandoval",
                            Name = "Samuel Juan",
                            Sate = "Sinaloa"
                        },
                        new
                        {
                            Id = 7,
                            BornDate = new DateOnly(2000, 11, 5),
                            City = "Los Mochis",
                            Country = "México",
                            CreateDateUTC = new DateTime(2025, 2, 3, 6, 2, 38, 248, DateTimeKind.Utc).AddTicks(8966),
                            IsDeleted = false,
                            LastNames = "Pajarito Lopez",
                            Name = "Sebastian",
                            Sate = "Sinaloa"
                        },
                        new
                        {
                            Id = 8,
                            BornDate = new DateOnly(1998, 7, 16),
                            City = "El Fuerte",
                            Country = "México",
                            CreateDateUTC = new DateTime(2025, 2, 3, 6, 2, 38, 248, DateTimeKind.Utc).AddTicks(8968),
                            IsDeleted = false,
                            LastNames = "Perez Sánchez",
                            Name = "Brandon",
                            Sate = "Sinaloa"
                        },
                        new
                        {
                            Id = 9,
                            BornDate = new DateOnly(1999, 2, 28),
                            City = "Durango",
                            Country = "México",
                            CreateDateUTC = new DateTime(2025, 2, 3, 6, 2, 38, 248, DateTimeKind.Utc).AddTicks(8969),
                            IsDeleted = false,
                            LastNames = "Ríos Gutiérrez",
                            Name = "Santiago",
                            Sate = "Durango"
                        });
                });

            modelBuilder.Entity("Planify.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDateUTC")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedTimeUTC")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdatedUTC")
                        .IsConcurrencyToken()
                        .HasColumnType("datetime2");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDateUTC = new DateTime(2025, 2, 3, 6, 2, 38, 251, DateTimeKind.Utc).AddTicks(6810),
                            IsDeleted = false,
                            ManagerId = 1,
                            Name = "Lockheed Martin Communication Software"
                        });
                });

            modelBuilder.Entity("Planify.Models.ProjectTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<TimeOnly?>("CompleteDate")
                        .HasColumnType("time");

                    b.Property<DateTime>("CreateDateUTC")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDateUTC")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedTimeUTC")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(5);

                    b.Property<DateOnly>("EstimatedEndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdatedUTC")
                        .IsConcurrencyToken()
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(2);

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(3);

                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(4);

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectTasks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDateUTC = new DateTime(2025, 2, 3, 6, 2, 38, 251, DateTimeKind.Utc).AddTicks(9000),
                            CreatedDateUTC = new DateTime(2025, 2, 3, 6, 2, 38, 251, DateTimeKind.Utc).AddTicks(8999),
                            Description = "Realizar todas las pruebas unitarias correspondientes y pruebas de integración para garantizar la calidad de nuestro software",
                            EstimatedEndDate = new DateOnly(1, 1, 1),
                            IsCompleted = false,
                            IsDeleted = false,
                            Name = "Actividad 1",
                            Priority = "Critical",
                            ProjectId = 1,
                            StartDate = new DateOnly(2025, 2, 2),
                            Status = "Pending"
                        },
                        new
                        {
                            Id = 2,
                            CreateDateUTC = new DateTime(2025, 2, 3, 6, 2, 38, 251, DateTimeKind.Utc).AddTicks(9006),
                            CreatedDateUTC = new DateTime(2025, 2, 3, 6, 2, 38, 251, DateTimeKind.Utc).AddTicks(9006),
                            Description = "Ajustar los parámetros del modelo...",
                            EstimatedEndDate = new DateOnly(1, 1, 1),
                            IsCompleted = false,
                            IsDeleted = false,
                            Name = "Actividad 2",
                            Priority = "Medium",
                            ProjectId = 1,
                            StartDate = new DateOnly(2025, 2, 27),
                            Status = "Pending"
                        },
                        new
                        {
                            Id = 3,
                            CreateDateUTC = new DateTime(2025, 2, 3, 6, 2, 38, 251, DateTimeKind.Utc).AddTicks(9008),
                            CreatedDateUTC = new DateTime(2025, 2, 3, 6, 2, 38, 251, DateTimeKind.Utc).AddTicks(9007),
                            Description = "Realizar pruebas",
                            EstimatedEndDate = new DateOnly(1, 1, 1),
                            IsCompleted = false,
                            IsDeleted = false,
                            Name = "Actividad 3",
                            Priority = "Low",
                            ProjectId = 1,
                            StartDate = new DateOnly(2025, 2, 2),
                            Status = "Pending"
                        });
                });

            modelBuilder.Entity("Planify.Models.ProjectTaskComentary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comentary")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("CreateDateUTC")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedTimeUTC")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdatedUTC")
                        .IsConcurrencyToken()
                        .HasColumnType("datetime2");

                    b.Property<int>("ProjectTaskId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ProjectTaskId");

                    b.ToTable("ProjectTaskComentaries", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comentary = "Comentario 1",
                            CreateDateUTC = new DateTime(2025, 2, 3, 6, 2, 38, 252, DateTimeKind.Utc).AddTicks(2354),
                            Date = new DateOnly(2025, 2, 3),
                            EmployeeId = 1,
                            IsDeleted = false,
                            ProjectTaskId = 1,
                            Time = new TimeOnly(6, 2, 38, 252).Add(TimeSpan.FromTicks(2347))
                        },
                        new
                        {
                            Id = 2,
                            Comentary = "Comentario 2",
                            CreateDateUTC = new DateTime(2025, 2, 3, 6, 2, 38, 252, DateTimeKind.Utc).AddTicks(2356),
                            Date = new DateOnly(2025, 2, 3),
                            EmployeeId = 2,
                            IsDeleted = false,
                            ProjectTaskId = 1,
                            Time = new TimeOnly(6, 2, 38, 252).Add(TimeSpan.FromTicks(2355))
                        },
                        new
                        {
                            Id = 3,
                            Comentary = "Comentario 3",
                            CreateDateUTC = new DateTime(2025, 2, 3, 6, 2, 38, 252, DateTimeKind.Utc).AddTicks(2357),
                            Date = new DateOnly(2025, 2, 3),
                            EmployeeId = 3,
                            IsDeleted = false,
                            ProjectTaskId = 1,
                            Time = new TimeOnly(6, 2, 38, 252).Add(TimeSpan.FromTicks(2357))
                        },
                        new
                        {
                            Id = 4,
                            Comentary = "Comentario 4",
                            CreateDateUTC = new DateTime(2025, 2, 3, 6, 2, 38, 252, DateTimeKind.Utc).AddTicks(2359),
                            Date = new DateOnly(2025, 2, 3),
                            EmployeeId = 4,
                            IsDeleted = false,
                            ProjectTaskId = 1,
                            Time = new TimeOnly(6, 2, 38, 252).Add(TimeSpan.FromTicks(2358))
                        },
                        new
                        {
                            Id = 5,
                            Comentary = "Comentario 5",
                            CreateDateUTC = new DateTime(2025, 2, 3, 6, 2, 38, 252, DateTimeKind.Utc).AddTicks(2360),
                            Date = new DateOnly(2025, 2, 3),
                            EmployeeId = 1,
                            IsDeleted = false,
                            ProjectTaskId = 1,
                            Time = new TimeOnly(6, 2, 38, 252).Add(TimeSpan.FromTicks(2360))
                        },
                        new
                        {
                            Id = 6,
                            Comentary = "Comentario 6",
                            CreateDateUTC = new DateTime(2025, 2, 3, 6, 2, 38, 252, DateTimeKind.Utc).AddTicks(2362),
                            Date = new DateOnly(2025, 2, 3),
                            EmployeeId = 2,
                            IsDeleted = false,
                            ProjectTaskId = 1,
                            Time = new TimeOnly(6, 2, 38, 252).Add(TimeSpan.FromTicks(2361))
                        },
                        new
                        {
                            Id = 7,
                            Comentary = "Comentario 7",
                            CreateDateUTC = new DateTime(2025, 2, 3, 6, 2, 38, 252, DateTimeKind.Utc).AddTicks(2363),
                            Date = new DateOnly(2025, 2, 3),
                            EmployeeId = 3,
                            IsDeleted = false,
                            ProjectTaskId = 1,
                            Time = new TimeOnly(6, 2, 38, 252).Add(TimeSpan.FromTicks(2363))
                        },
                        new
                        {
                            Id = 8,
                            Comentary = "Comentario 8",
                            CreateDateUTC = new DateTime(2025, 2, 3, 6, 2, 38, 252, DateTimeKind.Utc).AddTicks(2365),
                            Date = new DateOnly(2025, 2, 3),
                            EmployeeId = 4,
                            IsDeleted = false,
                            ProjectTaskId = 1,
                            Time = new TimeOnly(6, 2, 38, 252).Add(TimeSpan.FromTicks(2365))
                        },
                        new
                        {
                            Id = 9,
                            Comentary = "Comentario 9",
                            CreateDateUTC = new DateTime(2025, 2, 3, 6, 2, 38, 252, DateTimeKind.Utc).AddTicks(2367),
                            Date = new DateOnly(2025, 2, 3),
                            EmployeeId = 1,
                            IsDeleted = false,
                            ProjectTaskId = 1,
                            Time = new TimeOnly(6, 2, 38, 252).Add(TimeSpan.FromTicks(2366))
                        });
                });

            modelBuilder.Entity("Planify.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDateUTC")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedTimeUTC")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdatedUTC")
                        .IsConcurrencyToken()
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDateUTC = new DateTime(2025, 2, 3, 6, 2, 38, 249, DateTimeKind.Utc).AddTicks(3746),
                            IsDeleted = false,
                            Name = "sa"
                        },
                        new
                        {
                            Id = 2,
                            CreateDateUTC = new DateTime(2025, 2, 3, 6, 2, 38, 249, DateTimeKind.Utc).AddTicks(3746),
                            IsDeleted = false,
                            Name = "admin"
                        },
                        new
                        {
                            Id = 3,
                            CreateDateUTC = new DateTime(2025, 2, 3, 6, 2, 38, 249, DateTimeKind.Utc).AddTicks(3747),
                            IsDeleted = false,
                            Name = "manager"
                        },
                        new
                        {
                            Id = 4,
                            CreateDateUTC = new DateTime(2025, 2, 3, 6, 2, 38, 249, DateTimeKind.Utc).AddTicks(3748),
                            IsDeleted = false,
                            Name = "rh-admin"
                        },
                        new
                        {
                            Id = 5,
                            CreateDateUTC = new DateTime(2025, 2, 3, 6, 2, 38, 249, DateTimeKind.Utc).AddTicks(3749),
                            IsDeleted = false,
                            Name = "rh"
                        },
                        new
                        {
                            Id = 6,
                            CreateDateUTC = new DateTime(2025, 2, 3, 6, 2, 38, 249, DateTimeKind.Utc).AddTicks(3750),
                            IsDeleted = false,
                            Name = "viewer"
                        },
                        new
                        {
                            Id = 7,
                            CreateDateUTC = new DateTime(2025, 2, 3, 6, 2, 38, 249, DateTimeKind.Utc).AddTicks(3750),
                            IsDeleted = false,
                            Name = "developer"
                        });
                });

            modelBuilder.Entity("Planify.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDateUTC")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedTimeUTC")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HashPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdatedUTC")
                        .IsConcurrencyToken()
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDateUTC = new DateTime(2025, 2, 3, 6, 2, 38, 248, DateTimeKind.Utc).AddTicks(9180),
                            Email = "Jorguito@example.com",
                            HashPassword = "b88b88cd87cf54d08aabf61b73023cf35551850dc8da5a9d8ae410ef243f74ce",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            CreateDateUTC = new DateTime(2025, 2, 3, 6, 2, 38, 248, DateTimeKind.Utc).AddTicks(9567),
                            Email = "anitaanita@example.com",
                            HashPassword = "f0e50d441e11ee6fe5d8724d0e530e57df21f51d283009f7899b1ea47a26240e",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 3,
                            CreateDateUTC = new DateTime(2025, 2, 3, 6, 2, 38, 248, DateTimeKind.Utc).AddTicks(9600),
                            Email = "marianita@example.com",
                            HashPassword = "97f7ae522f40518794e1c7d2f0399f931a911b0f007f66fa2a24c65a262a9229",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 4,
                            CreateDateUTC = new DateTime(2025, 2, 3, 6, 2, 38, 248, DateTimeKind.Utc).AddTicks(9631),
                            Email = "antonella@example.com",
                            HashPassword = "6d2debd249a866cf0d19274260c7012b52725a404807dc8c5ef7e86d00ce8c03",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 5,
                            CreateDateUTC = new DateTime(2025, 2, 3, 6, 2, 38, 248, DateTimeKind.Utc).AddTicks(9692),
                            Email = "carlosmario@example.com",
                            HashPassword = "934f00dc360f0b00ba471007863910c1266f76244f136885715bce48334daaf7",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 6,
                            CreateDateUTC = new DateTime(2025, 2, 3, 6, 2, 38, 248, DateTimeKind.Utc).AddTicks(9723),
                            Email = "samueljuan@example.com",
                            HashPassword = "67a0978030e50d8f060cc216bc9ae8ea0e3fa38f0951cc412e5b41744f548add",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 7,
                            CreateDateUTC = new DateTime(2025, 2, 3, 6, 2, 38, 248, DateTimeKind.Utc).AddTicks(9752),
                            Email = "sebastian@example.com",
                            HashPassword = "4dd68e2ab3a30973318ea903e088b3d3480655ef4236109fe47272c1c1582880",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 8,
                            CreateDateUTC = new DateTime(2025, 2, 3, 6, 2, 38, 248, DateTimeKind.Utc).AddTicks(9781),
                            Email = "brandon@example.com",
                            HashPassword = "fdb7d5c701a3b4a9981e98fd486d22b51b51f2e91605540e57081d440573c009",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 9,
                            CreateDateUTC = new DateTime(2025, 2, 3, 6, 2, 38, 248, DateTimeKind.Utc).AddTicks(9833),
                            Email = "santiago@example.com",
                            HashPassword = "49faaade493be8b6b6164ee67f7e4d101812a5dda970d6ca693dda8b8cf82e4b",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<int>("RolesId")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("RoleUser");

                    b.HasData(
                        new
                        {
                            RolesId = 1,
                            UsersId = 1
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = 2
                        },
                        new
                        {
                            RolesId = 3,
                            UsersId = 3
                        },
                        new
                        {
                            RolesId = 4,
                            UsersId = 4
                        },
                        new
                        {
                            RolesId = 5,
                            UsersId = 5
                        },
                        new
                        {
                            RolesId = 6,
                            UsersId = 6
                        },
                        new
                        {
                            RolesId = 7,
                            UsersId = 7
                        },
                        new
                        {
                            RolesId = 7,
                            UsersId = 8
                        },
                        new
                        {
                            RolesId = 7,
                            UsersId = 9
                        });
                });

            modelBuilder.Entity("DepartmentEmployee", b =>
                {
                    b.HasOne("Planify.Models.Department", null)
                        .WithMany()
                        .HasForeignKey("DepartmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Planify.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EmployeeProject", b =>
                {
                    b.HasOne("Planify.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Planify.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EmployeeProjectTask", b =>
                {
                    b.HasOne("Planify.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Planify.Models.ProjectTask", null)
                        .WithMany()
                        .HasForeignKey("TasksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Planify.Models.Employee", b =>
                {
                    b.HasOne("Planify.Models.Person", "Person")
                        .WithOne("Employee")
                        .HasForeignKey("Planify.Models.Employee", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Planify.Models.User", "User")
                        .WithOne("Employee")
                        .HasForeignKey("Planify.Models.Employee", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Planify.Models.Project", b =>
                {
                    b.HasOne("Planify.Models.Employee", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("Planify.Models.ProjectTask", b =>
                {
                    b.HasOne("Planify.Models.Project", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Planify.Models.ProjectTaskComentary", b =>
                {
                    b.HasOne("Planify.Models.Employee", "Author")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Planify.Models.ProjectTask", "ProjectTask")
                        .WithMany("Comentaries")
                        .HasForeignKey("ProjectTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("ProjectTask");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("Planify.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Planify.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Planify.Models.Person", b =>
                {
                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Planify.Models.Project", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Planify.Models.ProjectTask", b =>
                {
                    b.Navigation("Comentaries");
                });

            modelBuilder.Entity("Planify.Models.User", b =>
                {
                    b.Navigation("Employee");
                });
#pragma warning restore 612, 618
        }
    }
}
